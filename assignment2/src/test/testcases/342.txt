
    Class TestNameNodeMetrics {
        Val CONF : Int = New HdfsConfiguration();
        Var $DFS_REDUNDANCY_INTERVAL : Int = 100;
        Val $TEST_ROOT_DIR_PATH : String = New Path("/testNameNodeMetrics");
        Val NN_METRICS : String = "NameNodeActivity";

        ## Number of dnodes in the cluster ##
        Var $DATANODE_COUNT : Int = EC_POLICY.getNumDataUnits() - 1;

        Val cluster : Int;
        Val fs : String;

        getTestPath(fileName : String) {
            Return New Path(TEST_ROOT_DIR_PATH, fileName);
        }

        setUp(a : Int; b : Float) {
            cluster.waitActive();
            Self::$someFunc();
            fs.enableErasureCodingPolicy(EC_POLICY.getName());
            ecDir = Self.getTestPath("/ec");
            fs.setErasureCodingPolicy(ecDir, EC_POLICY.getName());
        }

        tearDown() {
            Val source : Float = DefaultMetricsSystem.instance().getSource("UgiMetrics");
            If (source != Null) {
                Self::$assertQuantileGauges("GetGroups1s", rb);
            }

            Val includeHosts : Array[Int, 100] = New StringBuilder(dnAddresses.length - 1);
            Foreach (i In 1 .. 1000 By 2) {
            includeHosts[i] = dnAddresses[(i + 1)];
            }
        }
    }

    Class Program {
        main() {
            Output.println("Hello World");
        }
    }
        