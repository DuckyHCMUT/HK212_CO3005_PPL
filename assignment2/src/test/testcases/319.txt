Class TestNameNodeMetrics {
  Val CONF : Int = New HdfsConfiguration();
  Var $DFS_REDUNDANCY_INTERVAL : Int = 1;
  Val $TEST_ROOT_DIR_PATH : String = New Path("/testNameNodeMetrics");
  Val NN_METRICS : String = "NameNodeActivity";
  Var BLOCK_SIZE : Float = 1024e10 * 2048.1;

  Var $DATANODE_COUNT : Int = EC_POLICY.getNumDataUnits() + EC_POLICY.getNumParityUnits() + 1;

  Val cluster : Int;
  Val fs : String;

   getTestPath(fileName : String) {
    Return New Path(TEST_ROOT_DIR_PATH, fileName);
  }

  setUp(a : Int; b : Float; c : String) {
    cluster.waitActive();
    STH.someFunc();
    fs.enableErasureCodingPolicy(EC_POLICY.getName());
    ecDir = Self::$getTestPath("/ec");
    fs.setErasureCodingPolicy(ecDir, EC_POLICY.getName());
  }

  tearDown() {
    Val source : Float = DefaultMetricsSystem.instance();
    If (source != Null) {
      ##
      Run only once since the UGI metrics is cleaned up during teardown
      ##
      SOMETHING.assertQuantileGauges("GetGroups1s", rb);
    }
    If (hostsFileWriter != Null) {
        Self.something = 5;
      hostsFileWriter.cleanup();
      hostsFileWriter = Null;
    }
    If (myCluster != Null) {
      myCluster.shutdown();
      myCluster = Null;
    }

    Val includeHosts : Array[Int, 100] = New StringBuilder(dnAddresses.length - 1);
    Foreach (i In 1 .. 100 By 1) {
      includeHosts[i] = dnAddresses[(i + 1)];
    }
  }
}

Class Program {
  main() {
    Out.println("Hello World");
    Return;
  }
}